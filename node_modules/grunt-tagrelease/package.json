{
  "name": "grunt-tagrelease",
  "description": "Commit the changes and tag the last commit with a version from provided JSON file.",
  "version": "0.2.1",
  "homepage": "https://github.com/Darsain/grunt-tagrelease",
  "author": {
    "name": "Darsain",
    "url": "http://darsa.in"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Darsain/grunt-tagrelease.git"
  },
  "bugs": {
    "url": "https://github.com/Darsain/grunt-tagrelease/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "shelljs": "~0.2.5",
    "semver": "~2.1.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.4",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-tagrelease\n\nCommit the changes and tag the last commit with a version from provided JSON file. If there is nothing to commit, the\ntask will tag the current last commit.\n\nThis task has been created to work with other tasks like [grunt-bumpup](https://github.com/Darsain/grunt-bumpup) to help\ncreate a nicely configurable release task. You can see an example in **[Usage Examples section](#usage-examples)**.\n\nThis is a [Grunt](http://gruntjs.com/) 0.4 plugin. If you haven't used [Grunt](http://gruntjs.com/) before, be sure to\ncheck out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\n\n## Installation\n\nUse npm to install and save the plugin into `devDependencies`.\n\n```shell\nnpm install grunt-tagrelease --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-tagrelease');\n```\n\n## Configuration\n\nIn your project's Gruntfile, add a section named `tagrelease` to the data object passed into `grunt.initConfig()`. This is a\nsimple task, and does not conform to multi task options & files input types! All available configuration styles are\ndescribed below.\n\nThis is the most verbose form of the configuration with default options and a version from a JSON file:\n\n```js\ngrunt.initConfig({\n\ttagrelease: {\n\t\tfile: 'package.json',\n\t\tcommit:  true,\n\t\tmessage: 'Release %version%',\n\t\tprefix:  'v',\n\t\tannotate: false,\n\t},\n});\n```\n\nVersion from a `version` property, and no prefix:\n\n```js\ngrunt.initConfig({\n\ttagrelease: {\n\t\tversion: '1.0.1',\n\t\tprefix:  '',\n\t},\n});\n```\n\nVersion retrieved from a function passed to the `version` property, and enabled anotated tags:\n\n```js\ngrunt.initConfig({\n\ttagrelease: {\n\t\tversion: function () {\n\t\t\treturn '1.0.1';\n\t\t},\n\t\tanotated:  true,\n\t},\n});\n```\n\n#### Simple configs\n\nDefault options and a new version from a JSON file:\n\n```js\ngrunt.initConfig({\n\ttagrelease: 'package.json'\n});\n```\n\nDefault options and a new version passed directly:\n\n```js\ngrunt.initConfig({\n\ttagrelease: '1.0.1'\n});\n```\n\nDefault options and a new version from a function:\n\n```js\ngrunt.initConfig({\n\ttagrelease: function () {\n\t\treturn '1.0.1';\n\t}\n});\n```\n\n## Options\n\n#### version\nType: `Mixed`\nDefault: `null`\n\nNew version that will be used as a new tag name. Has a priority over the `file` option below. Can be a string or a\nfunction that returns a string. You have to define either this, or a `file` option below, otherwise the task won't know\nwhat should be the new tag.\n\n#### file\nType: `String`\nDefault: `null`\n\nPath to the JSON file with version that should be used as a new tag. You have to define either this, or a `version`\noption above, otherwise the task won't know what should be the new tag.\n\n#### commit\nType: `Boolean`\nDefault: `true`\n\nWhether to commit any un-staged changes before tagging. Does the `git commit -a` command.\n\n#### message\nType: `String`\nDefault: `Release %version%`\n\nMessage to be used in commits, and annotated tags. Available is one token:\n\n- `%version%` - Will be replaced with a new version, without a prefix.\n\n#### prefix\nType: `String`\nDefault: `v`\n\nTag prefix.\n\n#### annotate\nType: `Boolean`\nDefault: `false`\n\nWhether the new tag should be annotated. If enabled, the tag will receive a message from `message` option.\n\n## Usage Examples\n\n#### Release task\n\nIn this example, we create a release task that handles everything needed to build a new release of a project:\n\n```js\n// Tasks configuration\ngrunt.initConfig({\n\tjshint: ...,\n\tuglify: ...,\n\tbumpup: 'package.json',\n\ttagrelease: 'package.json'\n});\n\n// Load the plugins\ngrunt.loadNpmTasks('grunt-contrib-jshint');\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-bumpup');\ngrunt.loadNpmTasks('grunt-tagrelease');\n\n// Release alias task\ngrunt.registerTask('release', function (type) {\n\ttype = type ? type : 'patch';\n\tgrunt.task.run('jshint');         // Lint stuff\n\tgrunt.task.run('uglify');         // Minify stuff\n\tgrunt.task.run('bumpup:' + type); // Bump up the package version\n\tgrunt.task.run('tagrelease');     // Commit & tag the changes from above\n});\n```\n\nAnd now you can call this command to create a new minor release of a project:\n\n```shell\ngrunt release:minor\n```",
  "readmeFilename": "README.md",
  "_id": "grunt-tagrelease@0.2.1",
  "_shasum": "2ce8e1e42660658e69c7a13edfde02116126af77",
  "_from": "grunt-tagrelease@~0.2.0",
  "_resolved": "https://registry.npmjs.org/grunt-tagrelease/-/grunt-tagrelease-0.2.1.tgz"
}
