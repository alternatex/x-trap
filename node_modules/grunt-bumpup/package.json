{
  "name": "grunt-bumpup",
  "description": "Update the version, date, and other properties in JSON files while preserving the original indentation style.",
  "version": "0.2.0",
  "homepage": "https://github.com/Darsain/grunt-bumpup",
  "author": {
    "name": "Darsain",
    "url": "http://darsa.in"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Darsain/grunt-bumpup.git"
  },
  "bugs": {
    "url": "https://github.com/Darsain/grunt-bumpup/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "moment": "~2.0.0",
    "semver": "~1.1.3"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-bumpup\n\nUpdates the `version`, `date`, and other properties in your JSON files.\n\nThe properties are updated only when already present in the original JSON file.\n\nThe plugin also detects and preserves the original indentation style.\n\nThis is a [Grunt](http://gruntjs.com/) 0.4 plugin. If you haven't used [Grunt](http://gruntjs.com/) before, be sure to\ncheck out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\n\n## Installation\n\nUse npm to install and save the plugin into `devDependencies`.\n\n```shell\nnpm install grunt-bumpup --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-bumpup');\n```\n\n## Configuration\n\nIn your project's Gruntfile, add a section named `bumpup` to the data object passed into `grunt.initConfig()`. This is a\nsimple task, and does not conform to multi task options & files input types! All available configuration styles are\ndescribed below.\n\nThis is the most verbose form of the configuration:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\t// Options go here.\n\t\t},\n\t\tfiles: [\n\t\t\t// JSON files go here.\n\t\t],\n\t},\n});\n```\n\n### Configuration examples:\n\nDefault options and one JSON file:\n\n```js\ngrunt.initConfig({\n\tbumpup: 'package.json'\n});\n```\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\tfile: 'package.json'\n\t}\n});\n```\n\nDefault options, and multiple JSON files:\n\n```js\ngrunt.initConfig({\n\tbumpup: ['package.json', 'component.json']\n});\n```\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\tfiles: ['package.json', 'component.json']\n\t}\n});\n```\n\nCustom options:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\tdateformat: 'YYYY-MM-DD HH:mm',\n\t\t\tnormalize: false\n\t\t},\n\t\tfiles: ['package.json', 'component.json']\n\t}\n});\n```\n\n## Options\n\n#### options.normalize\nType: `Boolean`\nDefault: `true`\n\nWhether to normalize all JSON files to have the same version. The version that is than bumped up and saved into all\nfiles is taken from the first file passed into the files array.\n\n#### options.dateformat\nType: `String`\nDefault: `YYYY-MM-DD HH:mm:ss Z`\n\nA date format string used by [moment.js'](http://momentjs.com) `.format()` method. To see all available format tokens,\nread the [moment.js' format documentation](http://momentjs.com/docs/#/displaying/format/).\n\nFollowing is the list of valid moment.js ISO-8601 (computer and human readable) date formats.\n\n```\nYYYY-MM-DD\nYYYY-MM-DDTHH\nYYYY-MM-DD HH\nYYYY-MM-DDTHH:mm\nYYYY-MM-DD HH:mm\nYYYY-MM-DDTHH:mm:ss\nYYYY-MM-DD HH:mm:ss\nYYYY-MM-DDTHH:mm:ss.SSS\nYYYY-MM-DD HH:mm:ss.SSS\nYYYY-MM-DDTHH:mm:ss Z\nYYYY-MM-DD HH:mm:ss Z\n```\n\nThe dates are set in the UTC timezone, so including the Z token is recommended.\n\n## Custom setters\n\nYou can define your own property setters by passing them as a function in options object as a property name that should\nbe updated. For example, this will update the `timestamp` property inside `package.json`:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\ttimestamp: function (old) {\n\t\t\t\treturn +new Date();\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t}\n});\n```\n\nYou can also override the default property setters for `version` and `date` properties if you want some more control,\nor, lets say in a `version` property, when you are not using a Semantic Versioning, and need to define a custom version\nbumping style.\n\n### Setter arguments\n\nAll setters receive the old property value as a first argument.\n\nThe `version` setter receives the bump type from the CLI `bumpup:type` as a 2nd argument. Example:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\tversion: function (old, type) {\n\t\t\t\treturn newVersion; // Bump based on a `type` argument\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t}\n});\n```\n\nThe `date` setter receives the `option.dateformat` as a 2nd argument.\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\tdate: function (old, dateformat) {\n\t\t\t\treturn moment.utc().format(dateformat);\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t}\n});\n```\n\n### Return values\n\nEach setter has to return the new property value, or when something went wrong, `grunt.fail.warn()` an error and return\n`undefined`.\n\n## Usage\n\nYou call this task from the CLI with one argument, specifying the release type:\n\n```js\ngrunt bumpup:type\n```\n\nThe default `version` setter accepts these types:\n\n- **major**: Will bump the major part of a version, resetting minor, patch, and build to 0.\n- **minor**: Will bump the minor part of a version, resetting patch, and build to 0.\n- **patch**: Will bump the patch part of a version, resetting build to 0.\n- **build**: Will bump the build part of a version.\n\nVersion format: `major.minor.patch-build`.\n\nThe build part is adjusted only when present. If you have a `1.0.0` version, the `-build` part won't be appended unless\nalready present, or you've called the task with `build` argument:\n\n```shell\ngrunt bumpup:build\n```\n\n## Usage Examples\n\n#### Release task\nIn this example, we create a \"release\" task alias that handles everything needed to build a new project release:\n\n```js\n// Task configurations\ngrunt.initConfig({\n\tjshint: ...,\n\tuglify: ...,\n\tbumpup: 'package.json'\n});\n\n// Loading the plugins\ngrunt.loadNpmTasks('grunt-contrib-jshint');\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-bumpup');\n\n// Alias task for release\ngrunt.registerTask('release', function (type) {\n\ttype = type ? type : 'patch';     // Set the release type\n\tgrunt.task.run('jshint');         // Lint stuff\n\tgrunt.task.run('uglify');         // Minify stuff\n\tgrunt.task.run('bumpup:' + type); // Bump up the version\n});\n```\n\nAnd now you can call it from CLI like this:\n\n```shell\ngrunt release:minor\n```\n\n#### Updating config properties\n\nAfter bumpup executes, it updates the JSON properties that other tasks in queue running after it might want to use. For\nexample, if you have a `pkg` config property for easy access:\n\n```js\ngrunt.initConfig({\n\tpkg: grunt.file.readJSON('package.json')\n});\n```\n\nAnd you want to execute a task that uses this property immediately after bumpup, you have to tell grunt that\nthis property has changed. You can update the property like this:\n\n```js\ngrunt.config.set('pkg', grunt.file.readJSON('package.json'));\n```\n\nBut this has to be done in the grunt task queue right after the bumpup, otherwise it won't have any effect, as grunt\ntasks are asynchronous. The solution is to place it into an alias task, add to queue right after bumpup. This is the\nfinal release task using updating `pkg` property:\n\n```js\n// Task for updating the pkg config property. Needs to be run after\n// bumpup so the next tasks in queue can work with updated values.\ngrunt.registerTask('updatePkg', function () {\n\tgrunt.config.set('pkg', grunt.file.readJSON('component.json'));\n});\n\n// Release task.\ngrunt.registerTask('release', function (type) {\n\ttype = type ? type : 'patch';\n\tgrunt.task.run('jshint');\n\tgrunt.task.run('bumpup:' + type);\n\tgrunt.task.run('updatePkg');\n\tgrunt.task.run('build');\n\tgrunt.task.run('tagrelease');\n});\n```",
  "readmeFilename": "README.md",
  "_id": "grunt-bumpup@0.2.0",
  "_shasum": "925f1d00cdbedc3e5e7ab1d7b519876f652a86ba",
  "_from": "grunt-bumpup@~0.2.0",
  "_resolved": "https://registry.npmjs.org/grunt-bumpup/-/grunt-bumpup-0.2.0.tgz"
}
